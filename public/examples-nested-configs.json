{
  "type": "directory",
  "name": "nested-config-test",
  "dir": "",
  "children": [
    {
      "type": "file",
      "name": "lenses.json",
      "ext": ".json",
      "base": "lenses",
      "dir": "nested-config-test",
      "content": "{\n  \"lenses\": {\n    \"embed\": {\n      \"template\": \"educational\",\n      \"styles\": true,\n      \"title\": \"Root Level Content\",\n      \"features\": {\n        \"syntax\": true,\n        \"copy\": false\n      }\n    },\n    \"lines\": {\n      \"numbers\": true,\n      \"empty\": true,\n      \"prefix\": \"\"\n    },\n    \"ast\": {\n      \"showTypes\": true,\n      \"expandDepth\": 2,\n      \"colorize\": true,\n      \"highlight\": {\n        \"enabled\": true,\n        \"style\": \"normal\",\n        \"keywords\": [\"function\", \"class\", \"import\"]\n      }\n    }\n  },\n  \"defaults\": {\n    \".js\": [\"lines\", \"ast\"],\n    \".jsx\": [\"ast\", \"embed\"],\n    \".ts\": [\"lines\", \"ast\"],\n    \".md\": [\"embed\"]\n  }\n}",
      "path": "/nested-config-test/lenses.json",
      "lang": ".json",
      "error": null
    },
    {
      "type": "directory",
      "name": "frontend",
      "dir": "nested-config-test",
      "children": [
        {
          "type": "file",
          "name": "lenses.json",
          "ext": ".json",
          "base": "lenses",
          "dir": "nested-config-test/frontend",
          "content": "{\n  \"lenses\": {\n    \"embed\": {\n      \"template\": \"interactive\",\n      \"styles\": true,\n      \"title\": \"Frontend Component\",\n      \"features\": {\n        \"syntax\": true,\n        \"copy\": true,\n        \"preview\": true\n      }\n    },\n    \"ast\": {\n      \"showTypes\": false,\n      \"expandDepth\": 3,\n      \"colorize\": true,\n      \"highlight\": {\n        \"enabled\": true,\n        \"style\": \"bold\",\n        \"keywords\": [\"function\", \"class\", \"const\", \"let\", \"async\", \"await\"]\n      }\n    }\n  },\n  \"defaults\": {\n    \".jsx\": [\"ast\", \"embed\"],\n    \".tsx\": [\"ast\", \"embed\"],\n    \".js\": [\"embed\"]\n  }\n}",
          "path": "/nested-config-test/frontend/lenses.json",
          "lang": ".json",
          "error": null
        },
        {
          "type": "directory",
          "name": "components",
          "dir": "nested-config-test/frontend",
          "children": [
            {
              "type": "file",
              "name": "lenses.json",
              "ext": ".json",
              "base": "lenses",
              "dir": "nested-config-test/frontend/components",
              "content": "{\n  \"lenses\": {\n    \"embed\": {\n      \"template\": \"component-demo\",\n      \"styles\": true,\n      \"title\": \"React Component\",\n      \"features\": {\n        \"syntax\": true,\n        \"copy\": true,\n        \"preview\": true,\n        \"props\": true\n      }\n    },\n    \"ast\": {\n      \"showTypes\": true,\n      \"expandDepth\": 4,\n      \"colorize\": true,\n      \"interactive\": true,\n      \"highlight\": {\n        \"enabled\": true,\n        \"style\": \"caps\",\n        \"keywords\": [\"function\", \"class\", \"const\", \"useState\", \"useEffect\", \"props\"]\n      }\n    },\n    \"lines\": {\n      \"numbers\": false,\n      \"empty\": false,\n      \"prefix\": \"// \"\n    }\n  }\n}",
              "path": "/nested-config-test/frontend/components/lenses.json",
              "lang": ".json",
              "error": null
            },
            {
              "type": "file",
              "name": "Button.jsx",
              "ext": ".jsx",
              "base": "Button",
              "dir": "nested-config-test/frontend/components",
              "content": "import React, { useState } from 'react';\n\nconst Button = ({ \n  children, \n  variant = 'primary', \n  size = 'medium',\n  disabled = false,\n  onClick,\n  ...props \n}) => {\n  const [isPressed, setIsPressed] = useState(false);\n  \n  const baseClasses = 'btn transition-all duration-200';\n  const variantClasses = {\n    primary: 'bg-blue-500 hover:bg-blue-600 text-white',\n    secondary: 'bg-gray-200 hover:bg-gray-300 text-gray-800',\n    danger: 'bg-red-500 hover:bg-red-600 text-white'\n  };\n  \n  const sizeClasses = {\n    small: 'px-3 py-1 text-sm',\n    medium: 'px-4 py-2',\n    large: 'px-6 py-3 text-lg'\n  };\n  \n  const handleClick = (event) => {\n    if (disabled) return;\n    \n    setIsPressed(true);\n    setTimeout(() => setIsPressed(false), 150);\n    \n    if (onClick) {\n      onClick(event);\n    }\n  };\n  \n  const className = [\n    baseClasses,\n    variantClasses[variant],\n    sizeClasses[size],\n    disabled && 'opacity-50 cursor-not-allowed',\n    isPressed && 'scale-95'\n  ].filter(Boolean).join(' ');\n  \n  return (\n    <button\n      className={className}\n      disabled={disabled}\n      onClick={handleClick}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Button;",
              "path": "/nested-config-test/frontend/components/Button.jsx",
              "lang": ".jsx",
              "error": null
            },
            {
              "type": "file",
              "name": "Modal.jsx",
              "ext": ".jsx",
              "base": "Modal",
              "dir": "nested-config-test/frontend/components",
              "content": "import React, { useEffect, useRef } from 'react';\nimport Button from './Button';\n\nconst Modal = ({ \n  isOpen, \n  onClose, \n  title, \n  children, \n  size = 'medium' \n}) => {\n  const modalRef = useRef(null);\n  const overlayRef = useRef(null);\n  \n  useEffect(() => {\n    const handleEscape = (event) => {\n      if (event.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n    \n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'hidden';\n    }\n    \n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'auto';\n    };\n  }, [isOpen, onClose]);\n  \n  const handleOverlayClick = (event) => {\n    if (event.target === overlayRef.current) {\n      onClose();\n    }\n  };\n  \n  if (!isOpen) return null;\n  \n  const sizeClasses = {\n    small: 'max-w-md',\n    medium: 'max-w-lg', \n    large: 'max-w-2xl',\n    fullscreen: 'max-w-full m-4'\n  };\n  \n  return (\n    <div \n      ref={overlayRef}\n      className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\"\n      onClick={handleOverlayClick}\n    >\n      <div \n        ref={modalRef}\n        className={`bg-white rounded-lg shadow-xl ${sizeClasses[size]} w-full max-h-[90vh] overflow-y-auto`}\n      >\n        <div className=\"flex items-center justify-between p-6 border-b\">\n          <h2 className=\"text-xl font-semibold\">{title}</h2>\n          <Button \n            variant=\"secondary\" \n            size=\"small\" \n            onClick={onClose}\n            aria-label=\"Close modal\"\n          >\n            ×\n          </Button>\n        </div>\n        \n        <div className=\"p-6\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;",
              "path": "/nested-config-test/frontend/components/Modal.jsx",
              "lang": ".jsx",
              "error": null
            }
          ],
          "path": "/nested-config-test/frontend/components",
          "error": null
        },
        {
          "type": "directory",
          "name": "utils",
          "dir": "nested-config-test/frontend",
          "children": [
            {
              "type": "file",
              "name": "helpers.js",
              "ext": ".js",
              "base": "helpers",
              "dir": "nested-config-test/frontend/utils",
              "content": "export const debounce = (func, wait) => {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\nexport const throttle = (func, limit) => {\n  let inThrottle;\n  return function() {\n    const args = arguments;\n    const context = this;\n    if (!inThrottle) {\n      func.apply(context, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n};\n\nexport const formatCurrency = (amount, currency = 'USD') => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency\n  }).format(amount);\n};",
              "path": "/nested-config-test/frontend/utils/helpers.js",
              "lang": ".js",
              "error": null
            }
          ],
          "path": "/nested-config-test/frontend/utils",
          "error": null
        }
      ],
      "path": "/nested-config-test/frontend",
      "error": null
    },
    {
      "type": "directory",
      "name": "backend",
      "dir": "nested-config-test",
      "children": [
        {
          "type": "file",
          "name": "lenses.json",
          "ext": ".json",
          "base": "lenses",
          "dir": "nested-config-test/backend",
          "content": "{\n  \"lenses\": {\n    \"embed\": {\n      \"template\": \"api-docs\",\n      \"styles\": false,\n      \"title\": \"Backend API\",\n      \"features\": {\n        \"syntax\": true,\n        \"copy\": true,\n        \"curl\": true\n      }\n    },\n    \"ast\": {\n      \"showTypes\": true,\n      \"expandDepth\": 2,\n      \"colorize\": false,\n      \"highlight\": {\n        \"enabled\": true,\n        \"style\": \"normal\",\n        \"keywords\": [\"function\", \"class\", \"async\", \"await\", \"module\", \"exports\"]\n      }\n    },\n    \"lines\": {\n      \"numbers\": true,\n      \"empty\": false,\n      \"prefix\": \"│ \"\n    }\n  },\n  \"defaults\": {\n    \".js\": [\"lines\", \"embed\"],\n    \".py\": [\"lines\", \"embed\"],\n    \".md\": [\"embed\"]\n  }\n}",
          "path": "/nested-config-test/backend/lenses.json",
          "lang": ".json",
          "error": null
        },
        {
          "type": "directory",
          "name": "api",
          "dir": "nested-config-test/backend",
          "children": [
            {
              "type": "file",
              "name": "server.js",
              "ext": ".js",
              "base": "server",
              "dir": "nested-config-test/backend/api",
              "content": "const express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst rateLimit = require('express-rate-limit');\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Security middleware\napp.use(helmet());\napp.use(cors({\n  origin: process.env.FRONTEND_URL || 'http://localhost:3000',\n  credentials: true\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n});\napp.use(limiter);\n\n// Body parsing middleware\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true }));\n\n// Routes\napp.get('/api/health', (req, res) => {\n  res.json({ \n    status: 'healthy', \n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n\napp.get('/api/users', async (req, res) => {\n  try {\n    const { page = 1, limit = 10, search } = req.query;\n    \n    // Simulate database query\n    const users = await getUsersFromDB({ page, limit, search });\n    \n    res.json({\n      data: users,\n      pagination: {\n        page: parseInt(page),\n        limit: parseInt(limit),\n        total: users.length\n      }\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\napp.post('/api/users', async (req, res) => {\n  try {\n    const { name, email, role } = req.body;\n    \n    if (!name || !email) {\n      return res.status(400).json({ \n        error: 'Name and email are required' \n      });\n    }\n    \n    const newUser = await createUser({ name, email, role });\n    \n    res.status(201).json({ \n      message: 'User created successfully',\n      data: newUser \n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Error handling middleware\napp.use((error, req, res, next) => {\n  console.error('Server error:', error);\n  res.status(500).json({ \n    error: 'Internal server error',\n    ...(process.env.NODE_ENV === 'development' && { stack: error.stack })\n  });\n});\n\n// 404 handler\napp.use((req, res) => {\n  res.status(404).json({ error: 'Route not found' });\n});\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});",
              "path": "/nested-config-test/backend/api/server.js",
              "lang": ".js",
              "error": null
            }
          ],
          "path": "/nested-config-test/backend/api",
          "error": null
        }
      ],
      "path": "/nested-config-test/backend",
      "error": null
    },
    {
      "type": "directory",
      "name": "docs",
      "dir": "nested-config-test",
      "children": [
        {
          "type": "file",
          "name": "lenses.json",
          "ext": ".json",
          "base": "lenses",
          "dir": "nested-config-test/docs",
          "content": "{\n  \"lenses\": {\n    \"embed\": {\n      \"template\": \"documentation\",\n      \"styles\": true,\n      \"title\": \"Project Documentation\",\n      \"features\": {\n        \"toc\": true,\n        \"search\": true,\n        \"print\": true\n      }\n    },\n    \"lines\": {\n      \"numbers\": false,\n      \"empty\": true,\n      \"prefix\": \"\"\n    }\n  },\n  \"defaults\": {\n    \".md\": [\"embed\"],\n    \".txt\": [\"lines\"]\n  }\n}",
          "path": "/nested-config-test/docs/lenses.json",
          "lang": ".json",
          "error": null
        },
        {
          "type": "file",
          "name": "README.md",
          "ext": ".md",
          "base": "README",
          "dir": "nested-config-test/docs",
          "content": "# Nested Configuration Test Project\n\nThis project demonstrates the hierarchical configuration system in Spiral Lens 2.0.\n\n## Configuration Hierarchy\n\nConfigurations are inherited and merged from parent to child directories:\n\n1. **Root Level** (`/nested-config-test/lenses.json`)\n   - Base configuration for all files\n   - Educational template with syntax highlighting\n   - Standard AST analysis settings\n\n2. **Frontend Level** (`/frontend/lenses.json`)\n   - Overrides for frontend-specific needs\n   - Interactive templates with preview\n   - Enhanced AST with more keywords\n\n3. **Component Level** (`/frontend/components/lenses.json`)\n   - Component-specific optimizations\n   - React-focused keywords and settings\n   - Custom line prefixes for comments\n\n4. **Backend Level** (`/backend/lenses.json`)\n   - API documentation focus\n   - Minimal styling for performance\n   - Server-specific keywords\n\n5. **Documentation Level** (`/docs/lenses.json`)\n   - Documentation-optimized templates\n   - Table of contents and search features\n   - Clean formatting without line numbers\n\n## Testing Configuration Inheritance\n\nTry these URLs to see how configurations merge:\n\n### Root Level (base config)\n```\n#/nested-config-test/Button.jsx?ast\n```\n\n### Frontend Level (inherits + overrides)\n```\n#/nested-config-test/frontend/components/Button.jsx?ast\n```\n\n### Component Level (deeply nested overrides)\n```\n#/nested-config-test/frontend/components/Button.jsx?ast&highlight.style=caps\n```\n\n## Query Parameter Examples\n\n### Basic lens with config override\n```\n?ast&expandDepth=5&showTypes=false\n```\n\n### Nested configuration\n```\n?ast&highlight.style=bold&highlight.keywords=useState,useEffect\n```\n\n### JSON configuration\n```\n?ast&highlight={\"enabled\":true,\"style\":\"caps\",\"keywords\":[\"props\",\"state\"]}\n```\n\n### Multiple lenses with individual configs\n```\n?lines&numbers=false&ast&expandDepth=3&embed&template=component-demo\n```\n\n## Configuration Merging Rules\n\n1. **Deep Merge**: Nested objects are merged recursively\n2. **Array Override**: Arrays replace parent arrays completely\n3. **Query Priority**: URL parameters have highest priority\n4. **Local Override**: Child configs override parent configs\n5. **Default Fallback**: System defaults provide base values\n\nThis creates a flexible system where:\n- Global defaults provide consistency\n- Directory-specific configs optimize for context\n- URL parameters allow runtime customization\n- Deep nesting supports complex project structures",
          "path": "/nested-config-test/docs/README.md",
          "lang": ".md",
          "error": null
        }
      ],
      "path": "/nested-config-test/docs",
      "error": null
    }
  ],
  "path": "/nested-config-test",
  "error": null
}
