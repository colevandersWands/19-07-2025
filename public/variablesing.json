{
  "name": "spiral-lens--test-lesson",
  "type": "directory",
  "path": "/",
  "children": [
    {
      "name": "1-variables",
      "type": "directory",
      "path": "/1-variables",
      "children": [
        {
          "name": "1-declaring.js",
          "type": "file",
          "ext": ".js",
          "base": "1-declaring",
          "dir": "1-variables",
          "path": "/1-variables/1-declaring.js",
          "lang": ".js",
          "content": "'use strict';\n\n/* Declaring a Variable\n\n  declaring a variable creates a new \"box\" in program memory,\n    the box will begin empty.\n\n  variable declarations have two main parts:\n\n  - keyword: let, const or var.  (but just let for now)\n  - name: a name to help you read the code.\n          there are rules about what names you can and can't use\n          but that's for later\n\n*/\n\nlet turtle;\n\nlet food;\n\nlet x;\n"
        },
        {
          "name": "2-declaring-and-initializing.js",
          "type": "file",
          "ext": ".js",
          "base": "2-declaring-and-initializing",
          "dir": "1-variables",
          "path": "/1-variables/2-declaring-and-initializing.js",
          "lang": ".js",
          "content": "'use strict';\n\n/* Declaring and Initializing\n\n  you can also initialize a variable with a value\n  this means that the variable will not be empty\n\n  there are four main parts to declaring and initializing:\n\n  - keyword: let, const or var.  (but just let for now)\n  - name: a name to help you read the code\n  - assignment operator (=)\n  - initial value: what you want to store in the variable\n\n*/\n\nlet turtle = 'Vinnie';\n\nlet food = 'lettuce';\n\nlet x = 'abc';\n"
        },
        {
          "name": "3-assigning.js",
          "type": "file",
          "ext": ".js",
          "base": "3-assigning",
          "dir": "1-variables",
          "path": "/1-variables/3-assigning.js",
          "lang": ".js",
          "content": "'use strict';\n\n/* Assigning New Values\n\n  you can assign new values to a variable after they are declared.\n\n  assignments happen from right to left!\n\n  - the variable you want update is written on the LEFT of =\n  - the new value is written on the RIGHT of =\n*/\n\nlet turtle = 'Vinnie';\nturtle = 'Yurtle';\n\nlet food = 'lettuce';\nfood = 'peanut';\n\nlet x = 'abc';\nx = '-|-';\n"
        },
        {
          "name": "4-reading.js",
          "type": "file",
          "ext": ".js",
          "base": "4-reading",
          "dir": "1-variables",
          "path": "/1-variables/4-reading.js",
          "lang": ".js",
          "content": "'use strict';\n\n/* Reading Stored Values\n\n  you can also read the value stored in a variable\n  to read a variable's value you just write it somewhere!\n    somewhere other than the left side of =\n\n  you can use variables every way as many times as you like\n\n*/\n\nlet name = 'Pieter';\n\nlet greeting = 'hello ' + name;\nconsole.log(greeting); // \"hello Pieter\"\n\nname = 'Amela';\n\ngreeting = 'good bye ' + name;\nconsole.log(greeting); // \"good bye Amela\"\n"
        },
        {
          "name": "README.md",
          "type": "file",
          "ext": ".md",
          "base": "README",
          "dir": "1-variables",
          "path": "/1-variables/README.md",
          "lang": ".md",
          "content": "# Variables\n\nVariables are a good place to start understanding communication between\ndevelopers and the computer. They are one tool a developer has to make a program\neasier to read, and they are one way can you instruct computers to read & write\nprogram memory.\n\nYou can think of variables\n[like boxes](https://www.youtube.com/watch?v=Jvrszgiexg0) used to store data in\nyour programs. (_That video uses `var` but these programs use `let`. For now you\ncan think of them as the same thing._)\n\nStudy the JavaScript files in this folder to see the 4 main things you can do\nwith a variable:\n\n- **Declaring**\n- **Declaring and Initializing**\n- **Assigning**\n- **Reading**\n\n---\n\nHere's a helpful diagram of the syntax for variables in JavaScript:\n\n[![variable: declare, initialize](/variable-declare-initialize.jpg)](https://blog.jordanholt.dev/learn-javascript-variables/)\n\n---\n\nA visual analogy for how variables work and a program it can describe:\n\n[![variable box](/variable-box.png)](https://javascript.info/variables)\n\n```js\n'use strict';\n\n// declare the variable using let\n// initialize the value: \"Hello!\"\nlet message = 'Hello!';\n\n// assign a new value: \"World!\"\nmessage = 'World!';\n\n// read the stored value: \"World!\"\nconsole.log(message);\n```\n\n---\n\nAnd another little program to get you started:\n\n```js\n'use strict';\n\n// declare the variable using let\n// initialize the value: '.'\nlet dot = '.';\n\n// read the stored value: '.'\n// read the stored value: '.'\n// assign a new value: '..'\ndot = dot + dot;\n\n// read the stored value: '..'\nconsole.log(dot); // '..'\n```\n"
        },
        {
          "name": "study.json",
          "type": "file",
          "ext": ".json",
          "base": "study",
          "dir": "1-variables",
          "path": "/1-variables/study.json",
          "lang": ".json",
          "content": "{\n  \"--defaults\": {\n    \".js\": \"variables\"\n  },\n  \"study\": {\n    \"debug\": false\n  }\n}\n"
        }
      ]
    },
    {
      "name": "2-tracing-variables",
      "type": "directory",
      "path": "/2-tracing-variables",
      "children": [
        {
          "name": "1-declare-and-initialize.js",
          "type": "file",
          "ext": ".js",
          "base": "1-declare-and-initialize",
          "dir": "2-tracing-variables",
          "path": "/2-tracing-variables/1-declare-and-initialize.js",
          "lang": ".js",
          "content": "'use strict';\n\n/*\n  practice tracing it different ways:\n  - use \"variables\" to check how each variable is used\n  - open the code in JS Tutor and step through the program\n  - use the \"trace\" button and read the console output\n  - fill out a trace table based on the console output\n  - use \"highlight\" to trace the code by drawing on it\n\n  looking for a challenge? Try the \"debug\" button\n\n*/\n\n/* --- declaring --- */\n\n// declare onlyDeclared using let\nlet onlyDeclared;\n\n// when a variable is not initialized\n//  it's value is undefined by default\n\n// read onlyDeclared: undefined\nonlyDeclared;\n\n/* --- declaring and initializing --- */\n\n// declare declaredAndInitialized using let\n// initialize declaredAndInitialized to \"hello\"\nlet declaredAndInitialized = 'hello';\n\n// read declaredAndInitialized: \"hello\"\ndeclaredAndInitialized;\n"
        },
        {
          "name": "2-read-and-assign.js",
          "type": "file",
          "ext": ".js",
          "base": "2-read-and-assign",
          "dir": "2-tracing-variables",
          "path": "/2-tracing-variables/2-read-and-assign.js",
          "lang": ".js",
          "content": "'use strict';\n\n/*\n  practice tracing it different ways:\n  - use \"variables\" to check how each variable is used\n  - open the code in JS Tutor and step through the program\n  - use the \"trace\" button and read the console output\n  - fill out a trace table based on the console output\n  - use \"highlight\" to trace the code by drawing on it\n\n  looking for a challenge? Try the \"debug\" button\n\n*/\n\n/* --- assigning new values to a variable --- */\n\n// declare name using let\n// initialize to \"Gödel\"\nlet name = 'Gödel';\n\n/*\n  the initialized value is now stored in this variable:\n*/\n\n// read name: \"Gödel\"\nname;\n\n// assign name: \"Hofstadter\"\nname = 'Hofstadter';\n\n/*\n  a variable's value can change during a program\n  each time you read it there may be a different value stored\n*/\n\n// read name: \"Hofstadter\"\nname;\n\n// assign name: \"Schoenberg\"\nname = 'Schoenberg';\n\n/*\n  a variable's final value is the last value assigned to it in the program\n*/\n\n// read name: \"Schoenberg\"\nname;\n"
        },
        {
          "name": "3-all-together.js",
          "type": "file",
          "ext": ".js",
          "base": "3-all-together",
          "dir": "2-tracing-variables",
          "path": "/2-tracing-variables/3-all-together.js",
          "lang": ".js",
          "content": "'use strict';\n\n/*\n  practice tracing it different ways:\n  - use \"variables\" to check how each variable is used\n  - open the code in JS Tutor and step through the program\n  - use the \"trace\" button and read the console output\n  - fill out a trace table based on the console output\n  - use \"highlight\" to trace the code by drawing on it\n\n  looking for a challenge? Try the \"debug\" button\n\n*/\n\n// declare using let: pattern\n// initialize to \".\"\nlet pattern = '.';\n\n/*\n  variable assignments go from the right side of `=` to the left\n\n  first the code on the right side of `=` will be evaluated\n  then the new value is assigned to the variable on the left\n*/\n\n// read pattern: \".\"\n// operation: \".\" + \"@\"\n//    -> \".@\"\n// assign pattern: \".@\"\npattern = pattern + '@';\n\n/*\n  the value in a variable can changes during a program\n\n  `pattern` was initialized to \".\", but now it is \".@\"\n    next it will be \"@.@\"\n*/\n\n// read pattern: \".@\"\n// operation: \"@\" + \".@\"\n//    -> \"@.@\"\n// assign pattern: \"@.@\"\npattern = '@' + pattern;\n\n/*\n  a variable must be read every time it is used\n  even if it is used twice in the same line@\n*/\n\n// read pattern: \"@.@\"\n// read pattern: \"@.@\"\n// operation: \"@.@\" + \"@.@\"\n//    -> \"@.@@.@\"\n// assign pattern: \"@.@@.@\"\npattern = pattern + pattern;\n\n// read pattern: \"@.@@.@\"\npattern;\n"
        },
        {
          "name": "4-first-name.js",
          "type": "file",
          "ext": ".js",
          "base": "4-first-name",
          "dir": "2-tracing-variables",
          "path": "/2-tracing-variables/4-first-name.js",
          "lang": ".js",
          "content": "'use strict';\n\n/*\n  comment and uncomment different names\n  how will the program change?\n\n  practice tracing it different ways:\n  - use \"variables\" to check how each variable is used\n  - open the code in JS Tutor and step through the program\n  - use the \"trace\" button and read the console output\n  - fill out a trace table based on the console output\n  - use \"highlight\" to trace the code by drawing on it\n\n  looking for a challenge? Try the \"debug\" button\n\n*/\n\n// trace the program a few times with different values\n\nlet firstName = 'Pieter';\n// let firstName = 'Blake';\n// let firstName = 'George';\n\nlet greeting = 'hello ' + firstName + '!';\n\ngreeting = 'good bye ' + firstName + '.';\n"
        },
        {
          "name": "5-full-name.js",
          "type": "file",
          "ext": ".js",
          "base": "5-full-name",
          "dir": "2-tracing-variables",
          "path": "/2-tracing-variables/5-full-name.js",
          "lang": ".js",
          "content": "'use strict';\n\n/*\n  comment and uncomment different names\n  how will the program change?\n\n  practice tracing it different ways:\n  - use \"variables\" to check how each variable is used\n  - open the code in JS Tutor and step through the program\n  - use the \"trace\" button and read the console output\n  - fill out a trace table based on the console output\n  - use \"highlight\" to trace the code by drawing on it\n\n  looking for a challenge? Try the \"debug\" button\n\n*/\n\n// trace the program a few times with different values\n\nlet first = 'Pieter';\n// let first = 'Blake';\n// let first = 'George';\n\nlet last = 'Rabbit';\n// let last = 'Wozzeck';\n// let last = 'Schoenberg';\n\nlet fullName = first + ' ' + last;\n\nlet greeting = 'hello ' + fullName;\n\ngreeting = 'good bye ' + fullName;\n"
        },
        {
          "name": "6-value-swap.js",
          "type": "file",
          "ext": ".js",
          "base": "6-value-swap",
          "dir": "2-tracing-variables",
          "path": "/2-tracing-variables/6-value-swap.js",
          "lang": ".js",
          "content": "'use strict';\n\n/*\n  comment and uncomment different names\n  how will the program change?\n\n  practice tracing it different ways:\n  - use \"variables\" to check how each variable is used\n  - open the code in JS Tutor and step through the program\n  - use the \"trace\" button and read the console output\n  - fill out a trace table based on the console output\n  - use \"highlight\" to trace the code by drawing on it\n\n  looking for a challenge? Try the \"debug\" button\n\n*/\n\nlet a = '.';\nlet b = '@';\nlet temp;\n\ntemp = a;\na = b;\nb = temp;\n\n// is it possible two swap a and b without using temp?\n"
        },
        {
          "name": "README.md",
          "type": "file",
          "ext": ".md",
          "base": "README",
          "dir": "2-tracing-variables",
          "path": "/2-tracing-variables/README.md",
          "lang": ".md",
          "content": "# Tracing Variables\n\nUntil you learn how to _trace_ a program, code can feel like a mystery. After\nyou've learned how to trace, code can still be tricky to understand but at least\nthere is no more mystery.\n\n---\n\n## Ways to Trace\n\nThere are many techniques for tracing a program, each one has some pros and\ncons. What matters most at this point is that you try them all find the one that\nhelps you most:\n\n- **The `?variables` lens**: Helpful to find your way around the code before\n  moving on to the dynamic tracing techniques. This lens will help you find all\n  the variables and how they are used in the code.\n- **JS Tutor**: This website visualizes how program memory works. You can step\n  forwards and backwards through the program one statement at a time, seeing how\n  each instruction interacts with memory. Studying in this site has two separate\n  steps, just like with a real JS program:\n  1. Write code in the editor\n  2. Run the code and step tep through it in the visualization page\n- **The \"trace\" button**: When you click this button it will run your code and\n  log every step of execution to the console. Compared to JS Tutor the \"trace\"\n  button will step through your program in more detail (logging every operator),\n  but will not have a nice visualization of memory.\n- **Trace Tables (\"tables\" button)**: This is a way to manually trace a program,\n  writing down each time a variable is used so you can understand the program's\n  dynamic behavior. You can check your trace tables by comparing them to the\n  console output from the \"trace\" button.\n- **Learn With Trace**: Like JS Tutor, but with different visualizations.\n- **JS Tutor Live**: This is like JS Tutor, but with only one page. You edit the\n  code and step through it on the same page. As you change the code the\n  visualization will update in real time. This is helpful for quicker studying\n  but is not how a real JS program works.\n- **The `?highlight` lens**: This allows you to draw on the code, tracing the\n  program's execution with different colors. This technique works very well for\n  group study. (programs in this folder will open with `?highlight` by default)\n- **🐔 The Debugger**: Built into your browser is a great tool for stepping\n  through your programs and understanding every detail of execution. If this is\n  too much information at first then you can leave it for now, you'll cover this\n  in depth with the Debugging module.\n\nSo that's a lot of info, but how can you know when you've understood a program\nand are ready to study the next? It's quite simple actually: can you correctly\nfill out a trace table without looking at the console output?\n\nTrace tables are such a great tool for study and self-assessment that there's a\nwhole section about them ...\n\n---\n\n## Trace Tables\n\nTrace tables have been around as long as computer programming (probably). The\nchallenge with a trace table is to run the code in your head, keeping track of\nall the variables in your program by hand. This is also called a _dry run_ or a\n_desk check_.\n\nYou can write trace tables on paper with a pencil (always a good way to go), or\nyou can use the trace tables built into Study Lenses. There are three different\ntypes of trace table available in Study Lenses:\n\n1. **steps**: The _steps_ table asks you to be the computer and to go step by\n   step through the program, recording each time a variable is declared, read,\n   or assigned. When you use the steps table you can check your work by pressing\n   `trace` button and comparing your table to the console output.\n2. **values**: The _values_ table is the traditional type of trace table. With\n   the _values_ table you only keep track of each time a variable is assigned a\n   new value. You can also check your _values_ table by using the `trace` button\n   and only checking against the _assign_ logs\n3. **Operators**: This table is for studying operator precedence, you'll learn\n   more about this in Debugging.\n\nYou may find that the **steps** table is more helpful in the beginning when you\nare first learning. It forces you to pay close attention to each step of program\nexecution.\n\nLater on you may prefer the **values** table because it allows you to look at\nthe bigger picture and see more clearly the _strategy_ (or _algorithm_) of a\nprogram.\n"
        },
        {
          "name": "study.json",
          "type": "file",
          "ext": ".json",
          "base": "study",
          "dir": "2-tracing-variables",
          "path": "/2-tracing-variables/study.json",
          "lang": ".json",
          "content": "{\n  \"--defaults\": {\n    \".js\": \"highlight\"\n  }\n}\n"
        }
      ]
    },
    {
      "name": "3-variable-names",
      "type": "directory",
      "path": "/3-variable-names",
      "children": [
        {
          "name": "1.md",
          "type": "file",
          "ext": ".md",
          "base": "1",
          "dir": "3-variable-names",
          "path": "/3-variable-names/1.md",
          "lang": ".md",
          "content": "# Variable Names: 1\n\nAll of these programs log the same final value. Which two programs have the same\ncomputer instructions for the computer?\n\n<table>\n\n<tr>\n<td>\n\n## A\n\n```js\n'use strict';\n\nlet first = 'hello';\n\nlet last = 'world';\n\nlet full = 'hello world';\n\nconsole.log(full);\n```\n\n</td>\n<td>\n\n## B\n\n```js\n'use strict';\n\nlet first = 'hello';\n\nlet last = 'world';\n\nlet full = first + ' ' + last;\n\nconsole.log(full);\n```\n\n</td>\n</tr>\n\n<tr>\n<td>\n\n## C\n\n```js\n'use strict';\n\nlet x = 'hello';\n\nlet y = 'world';\n\nconsole.log(x + ' ' + y);\n```\n\n</td>\n<td>\n\n## D\n\n```js\n'use strict';\n\nlet x = 'hello';\n\nlet y = 'world';\n\nlet z = 'hello world';\n\nconsole.log(z);\n```\n\n</td>\n</tr>\n\n</table>\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n**A** and **D**.\n\n</details>\n"
        },
        {
          "name": "2.md",
          "type": "file",
          "ext": ".md",
          "base": "2",
          "dir": "3-variable-names",
          "path": "/3-variable-names/2.md",
          "lang": ".md",
          "content": "# Variable Names: 3\n\nAll of these programs log the same final value. Which two programs have the same\ncomputer instructions for the computer?\n\n<table>\n\n<tr>\n<td>\n\n## A\n\n```js\n'use strict';\n\nlet filler = ' ';\n\nlet sentence = 'A' + filler + 'red' + filler + 'car.';\n\nconsole.log(sentence);\n```\n\n</td>\n<td>\n\n## B\n\n```js\n'use strict';\n\nlet filler;\n\nfiller = ' ';\n\nlet sentence = 'A' + filler + 'red' + filler + 'car.';\n\nconsole.log(sentence);\n```\n\n</td>\n</tr>\n\n<tr>\n<td>\n\n## C\n\n```js\n'use strict';\n\nlet space;\n\nspace = ' ';\n\nlet phrase = 'A' + space + 'red' + space + 'car.';\n\nconsole.log(phrase);\n```\n\n</td>\n<td>\n\n## D\n\n```js\n'use strict';\n\nlet a = ' ';\n\nlet b = 'A' + a + 'red' + ' ' + 'car.';\n\nconsole.log(b);\n```\n\n</td>\n</tr>\n\n</table>\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n**B** and **C**.\n\n</details>\n"
        },
        {
          "name": "3.md",
          "type": "file",
          "ext": ".md",
          "base": "3",
          "dir": "3-variable-names",
          "path": "/3-variable-names/3.md",
          "lang": ".md",
          "content": "# Variable Names: 2\n\nWhich two programs have the same computer instructions for the computer?\n\n<table>\n\n<tr>\n<td>\n\n## A\n\n```js\n'use strict';\n\nlet filler = ' ';\n\nlet sentence = 'A' + filler + 'butter';\n\nfiller = '';\n\nsentence = sentence + filler + 'fly';\n\nconsole.log(sentence);\n```\n\n</td>\n<td>\n\n## B\n\n```js\n'use strict';\n\nlet x = ' ';\n\nlet y = 'A' + x + 'butter';\n\nx = '';\n\ny = x + y + 'fly';\n\nconsole.log(y);\n```\n\n</td>\n</tr>\n\n<tr>\n<td>\n\n## C\n\n```js\n'use strict';\n\nlet java = ' ';\n\nlet script = 'A' + java + 'butter';\n\njava = '';\n\nscript = script + java + 'fly';\n\nconsole.log(script);\n```\n\n</td>\n<td>\n\n## D\n\n```js\n'use strict';\n\nlet filler = ' ';\n\nlet sentence = 'A' + filler + 'butter';\n\nfiller = ' ';\n\nsentence = sentence + filler + 'fly';\n\nconsole.log(sentence);\n```\n\n</td>\n</tr>\n\n</table>\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n**A** and **C**.\n\n</details>\n"
        },
        {
          "name": "4.md",
          "type": "file",
          "ext": ".md",
          "base": "4",
          "dir": "3-variable-names",
          "path": "/3-variable-names/4.md",
          "lang": ".md",
          "content": "# Variable Names: 4\n\nWhich two programs have the same computer instructions for the computer?\n\n<table>\n\n<tr>\n<td>\n\n## A\n\n```js\n'use strict';\n\nlet greeting = 'hello';\n\nconsole.log(greeting);\n\nlet name = 'margo';\n\nlet greet = greeting + ' ' + name;\n\nconsole.log(greet + '!');\n```\n\n</td>\n<td>\n\n## B\n\n```js\n'use strict';\n\nlet a = 'hello';\n\nconsole.log(a);\n\nlet b = 'margo';\n\na = a + ' ' + b;\n\nconsole.log(a + '!');\n```\n\n</td>\n</tr>\n\n<tr>\n<td>\n\n## C\n\n```js\n'use strict';\n\nlet a = 'hello';\n\nconsole.log(a);\n\nlet b = 'margo';\n\na = a + ' ' + b;\n\nconsole.log(a);\n```\n\n</td>\n<td>\n\n## D\n\n```js\n'use strict';\n\nlet greeting = 'hello';\n\nconsole.log(greeting);\n\nlet name = 'margo';\n\ngreeting = greeting + ' ' + name;\n\nconsole.log(greeting + '!');\n```\n\n</td>\n</tr>\n\n</table>\n\n---\n\n<details>\n<summary><strong>check it</strong></summary>\n<br>\n\n**B** and **D**.\n\n</details>\n"
        },
        {
          "name": "README.md",
          "type": "file",
          "ext": ".md",
          "base": "README",
          "dir": "3-variable-names",
          "path": "/3-variable-names/README.md",
          "lang": ".md",
          "content": "# Variable Names\n\nThe computer cannot understand what your variable names _mean_, to a computer\n`let asdf = 'hello';` is same as `let greeting = 'hello';` . Variable names are\n100% for developers to understand the code and 0% helpful for the computer.\n\nComputers just care how you _use_ the variables:\n\n- Where is it declared?\n- Is it initialized?\n- Where is it read?\n- Where is it assigned a new value?\n\nWhen the computer is interpreting your code it's these \"patterns\" that make one\nset of instructions different from another, not the variable names.\n\nConsider these two programs, they both have different variable names but the\nsame instructions. Commented above each line is how the computer will interpret\nyour code (or close enough for now). Can you find anything different between the\ncomments in each program?\n\n---\n\n```js\n'use strict';\n\nconsole.log('--- program 1 --- ');\n\n// declare variable 1: let\n// initialize variable 1: \"hello\"\nlet greeting = 'hello';\n\n// declare variable 2: let\n// initialize variable 2: \"!\"\nlet excitement = '!';\n\n// read from variable 1: \"hello\"\n// read from variable 2: \"!\"\n// assign to variable 1: \"hello!\"\ngreeting = greeting + excitement;\n\n// read from variable 1: \"hello!\"\nconsole.log(greeting);\n```\n\n---\n\n```js\n'use strict';\n\nconsole.log('--- program 2 --- ');\n\n// declare variable 1: let\n// initialize variable 1: \"hello\"\nlet x = 'hello';\n\n// declare variable 2: let\n// initialize variable 2: \"!\"\nlet y = '!';\n\n// read from variable 1: \"hello\"\n// read from variable 2: \"!\"\n// assign to variable 1: \"hello!\"\nx = x + y;\n\n// read from variable 1: \"hello!\"\nconsole.log(x);\n```\n"
        }
      ]
    },
    {
      "name": "README.md",
      "type": "file",
      "ext": ".md",
      "base": "README",
      "dir": "",
      "path": "/README.md",
      "lang": ".md",
      "content": "# Variables\n\nVariables allow you to save values to use later in your program.\n\nThey're kind of like a box that can only hold one thing at a time.\n\n```js\n'use strict';\n\n/*\n  let           -> declaration\n  iAm           -> variable name\n  =             -> assignment operator (initialization)\n  'a variable'  -> the initial value\n*/\n\nlet iAm = 'a variable';\nconsole.log(iAm);\n\n/*\n  iAm           -> variable name\n  =             -> assignment operator\n  'a variable'  -> the new value\n*/\n\niAm = 'hungry';\nconsole.log(iAm);\n```\n\n<details>\n<summary>🥚 declare, initialize, assign</summary>\n\n```js\n'use strict';\nconsole.log('-- declare, initialize, assign --');\n\n// declare a value and initialize it's value\nlet favoriteTree = 'palm';\nconsole.log(favoriteTree); // 'palm'\n\n// assigning a different value\nfavoriteTree = 'oak';\nconsole.log(favoriteTree); // 'oak'\n\n// declare variable with an initial value\nlet bread = 'fresh';\nconsole.log(bread); // 'fresh'\n\n// re-assign the variable\nbread = 'stale';\nconsole.log(bread); // 'stale'\n```\n\n</details>\n<details>\n<summary>🥚 uninitialized variables</summary>\n\n```js\n'use strict';\nconsole.log('-- uninitialized variables --');\n\n// declaring a variable without an initial value\n//  it will be initialized to undefined by default\nlet uninitialized;\nconsole.log(uninitialized); // undefined\n\n// you can assign values to uninitialized variables\nuninitialized = 'something';\nconsole.log(uninitialized); // 'something'\n\n// initializing a variable to undefined does the same thing\nlet initialized = undefined;\nconsole.log(initialized); // undefined\n```\n\n</details>\n\n> PS. In this module you will only learn about `let`. You will cover `const` and\n> `var` in later modules.\n\n---\n\n## Using Variables\n\nVariables are relatively simple, they store a value and that value can change.\nWhat becomes more challenging is understanding how to use variables in a\nprogram.\n\nBelow is a few examples of what you can do with variables, the\n[naming-variables](../naming-variables) exercises go into more depth on the\ndifferent ways you can use a variable in your programs.\n\n<details>\n<summary>🥚 different types</summary>\n\n```js\n'use strict';\nconsole.log('-- variables: different types --');\n// variables can store any type\n//  and you can change the types all you want\n\n// declare and assign a boolean value\nlet variable = true;\nconsole.log(typeof variable); // 'boolean'\n\n// assign a string to the variable\nvariable = 'computers';\nconsole.log(typeof variable); // 'string'\n\n// assign undefined to the variable\nvariable = undefined;\nconsole.log(typeof variable); // 'undefined'\n\n// and another boolean\nvariable = false;\nconsole.log(typeof variable); // 'boolean'\n```\n\n</details>\n<details>\n<summary>🥚 assigning results</summary>\n\n```js\n'use strict';\nconsole.log('-- assigning results --');\n// you can assign the result of an operation to a variable\n\n// boolean logic\nlet falseOrTrue = false || true;\nconsole.log(falseOrTrue); // true\n\n// string concatenation\nlet favoriteTree = 'p' + 'a' + 'l' + 'm';\nconsole.log(favoriteTree); // 'palm'\n\n// replacing things in a string\nlet noJoy = 'enjoy life'.replaceAll('joy', '');\nconsole.log(noJoy); // 'en life'\n\n// searching a string with .includes\nlet hasAnApple = 'bananaapplemango'.includes('apple');\nconsole.log(hasAnApple); // true\n```\n\n</details>\n<details>\n<summary>🥚 reading variables</summary>\n\n```js\n'use strict';\nconsole.log('-- reading variables --');\n\n// you can read the values stored in a variable\n//  and use them anywhere you can use the value it stores\n\n// operate on a string stored in a variable\nlet car = 'vrooom';\nlet loudCar = car.toUpperCase();\nlet excitedCar = loudCar.replaceAll('O', '!');\nconsole.log(excitedCar); // 'VR!!!M'\n\n// use a string stored in a variable as an argument\nlet oldLetter = 'f';\nlet newLetter = 'd';\nlet happyAnimal = 'fog'.replaceAll(oldLetter, newLetter);\nconsole.log(happyAnimal); // 'dog'\n\n// all together\nlet characterName = '  harry potter   ';\nlet trimmedName = characterName.trim(); // 'harry potter'\n\nlet bookTitle = 'Harry Potter and the Magical Thing';\nlet titleLowerCase = bookTitle.toLowerCase(); // 'harry potter and the magical thing'\n\nlet includesName = titleLowerCase.includes(trimmedName);\nconsole.log(includesName); // true\n```\n\n</details>\n<details>\n<summary>🥚 swapping values</summary>\n\n```js\n'use strict';\nconsole.log('-- swapping values --');\n\n/*\n  swapping values between two variables is a good little exericse\n  it's not something you'll see much in programs\n  but it's a great way to understand how variables work\n*/\n\n// declare two variables with values that need to be swapped\nlet a = 2;\nlet b = 1;\n// declare a variable to store values temporarily\nlet temp;\nconsole.log(a, b, temp); // 1, 2, undefined\n\n// assign the value stored in 'a' to 'temp'\ntemp = a;\nconsole.log(a, b, temp); // 2, 1, 2\n\n// assign the value stored in 'b' to 'a'\na = b;\nconsole.log(a, b, temp); // 1, 1, 2\n\n// assign the value stored in 'temp' to 'b'\nb = temp;\nconsole.log(a, b, temp); // 1, 2, 2\n```\n\n</details>\n\n---\n\n## Three Common Errors\n\nProgramming languages have strict rules about what you can and cannot do. Here\nare three errors you will make quite a bit when you start your own\n[explorations](../explorations), even a spelling mistake can cause these errors!\n\nYou may get different error messages depending on which browser you are using,\nbut they mean the same thing. In Debugging we will go much deeper into\ninterpreting and correcting program errors.\n\n<details>\n<summary>🥚 not declaring a variable</summary>\n<br>\n\nUsing a variable that has not been declared will throw an error (when you're in\nstrict mode, but that's a story for another day. All the exercises in this repo\nare run in strict mode).\n\n```js\n'use strict';\nconsole.log('-- not declaring 1 --');\n\n// let animal; // uncomment this line to fix the error\nanimal = 'horse'; // ReferenceError\n```\n\n```js\n'use strict';\nconsole.log('-- not declaring 2 --');\n\n// a common mistake is spelling your variables incorrectly\nlet spellingMistake = 'oops!';\nconsole.log(spelingMistake); // ReferenceError\n```\n\n</details>\n<details>\n<summary>🥚 using a variable before it is declared</summary>\n\n```js\n'use strict';\nconsole.log('-- using before declaration --');\n\n// read the variable - will throw an error!\nconsole.log(favoriteColor); // ReferenceError\n\n// declare and initialize the variable\nlet favoriteColor = 'red';\n\n// read the variable\nconsole.log(favoriteColor);\n```\n\n</details>\n<details>\n<summary>🥚 declaring a variable twice</summary>\n<br>\n\nDeclaring a variable tells JavaScript to prepare a place in memory with that\nname. Trying to create two spaces in memory with the same name will cause an\nerror.\n\n- Chrome & Chromium-based browsers:\n  `SyntaxError: Identifier '_' has already been declared`\n- Firefox: `SyntaxError: redeclaration of let _`\n\n```js\n'use strict';\n// ! this log never happens !\n//  syntax errors happen before the program runs\n//  so no single line of code will happen\n//  you will learn more about program life cycle in Debugging\nconsole.log('-- declaring twice --');\n\nlet vegetable = 'carrot';\nlet vegetable = 'potato'; // SyntaxError\n// vegetable = 'potato'; // no error\n```\n\n</details>\n\n---\n\n## Variable Names\n\nIn JavaScript there are a few rules about naming variables. There aren't too\nmany rules and the rules aren't very complicated, you just need to learn them:\n\n- [javascript.info](https://javascript.info/variables#variable-naming)\n- [nexTRIE](https://www.youtube.com/watch?v=O5WlRR-lEDE)\n- [launchcode](https://education.launchcode.org/intro-to-web-dev-curriculum/data-and-variables/reading/more-on-variables/index.html#naming-variables)\n\n<details>\n<summary>🥚 variable names <strong>can</strong> use numbers, letters, $, or _</summary>\n\n```js\n'use strict';\nconsole.log('-- valid variable names --');\n// all of these variable names are ok\n\nlet $ = 1;\nlet _ = 2;\nlet a = 3;\nlet A = 4;\nlet b1_$ = 5;\nlet HackYourFuture2021_$ = 6;\nlet b_e_l_g_i_u_m = 7;\n// ...\n```\n\n</details>\n<details>\n<summary>🥚 variable names <strong>are</strong> case-sensitive</summary>\n\n```js\n'use strict';\nconsole.log('-- variable names are case-sensitive --');\n\n// notice, there is no error.\n//  JS does not consider this as declaring the same variable twice\nlet javascript = 'a programming language';\nlet JavaScript = 'upper case!';\n\nconsole.log(javascript); // 'a programming language'\nconsole.log(JavaScript); // 'upper case!'\n```\n\n</details>\n<details>\n<summary>🥚 variable names can <strong>not</strong> start with a number</summary>\n\n```js\n'use strict';\nconsole.log('-- variable names cannot start with a number --')\n\nlet a1 = 'this works';\n\nlet 1a = 'will throw an error';\n```\n\n</details>\n<details>\n<summary>🥚 variable names can not use any other characters</summary>\n\n```js\n'use strict';\nlet a*a = 'will throw an error';\n```\n\n```js\n'use strict';\nlet a-b-c = 'will throw an error';\n```\n\n```js\n'use strict';\nlet @hyf = 'will throw an error';\n```\n\n```js\n'use strict';\n// spaces count as other characters\nlet hack your future = 'will throw an error';\n```\n\n</details>\n<details>\n<summary>🥚 variable names can not be <strong>reserved words</strong></summary>\n<br>\n\nIn JavaScript there are some words that you cannot use as variable names. These\nare called _Reserved Words_. Some of them are words which carry special meaning\nin JS like `let` or `null`. Other reserved words don't have any special meaning\nyet, but may in the future.\n\n```js\n'use strict';\nlet var = 'will throw an error';\n```\n\n```js\n'use strict';\nlet null = 'will throw an error';\n```\n\n```js\n'use strict';\nlet function = 'will throw an error';\n```\n\n```js\n'use strict';\nlet public = 'will throw an error';\n```\n\nall the reserved works, in a list:\n\n- [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords)\n- [w3schools](https://www.w3schools.com/js/js_reserved.asp)\n\n</details>\n\n### Good Variable Names\n\nJust because a variable name doesn't throw an error doesn't mean it's a good\nname.\n\nA good variable name is easy to read and helps you understand what the program\ndoes. You will learn more about how to choose good variable names in Debugging.\nFor now take a look at these two programs with the same logic. see how good\nnames help, and bad names can be confusing:\n\n<details>\n<summary>🐣 confusing variable names</summary>\n\n```js\n'use strict';\nlet thisThing = 'hello';\nlet thatThing = '';\n\nfor (let oneThing of thisThing) {\n  thatThing = oneThing + thatThing;\n}\n\nconsole.log(thatThing); // 'olleh'\n```\n\n</details>\n\n<details>\n<summary>🐣 helpful variable names</summary>\n\n```js\n'use strict';\nlet forwards = 'hello';\nlet backwards = '';\n\nfor (let nextLetter of forwards) {\n  backwards = nextLetter + backwards;\n}\n\nconsole.log(backwards); // 'olleh'\n```\n\n</details>\n\n### Built-in Variables\n\nSome variables already come with JavaScript, you do not need to declare them to\nuse them. Think of `console` - you didn't write that variable but you use it all\nthe time.\n\nThese a not the same as reserved words, you can use declare or reassign them!\nDeclaring built-in variables will almost always cause problems in your programs\nbecause you _over-write_ the value that was stored before. There are some\nadvanced use-cases when this is helpful, but you won't learn about those at HYF.\n\nHere are some examples of using built-in variable names in your programs. These\nare just examples, not suggestions ;)\n\n<details>\n<summary>🐥 assigning to a built-in variable</summary>\n\n```js\n'use strict';\n// this log will work because console has not been reassigned\nconsole.log('-- assigning to console --');\n\nconsole = 'hello';\n\n// see? it's a string!\nalert(console);\n\n// this log will not work, console now stores a string\nconsole.log('will throw an error');\n```\n\n</details>\n<details>\n<summary>🐥 declaring a built-in name</summary>\n\n```js\n'use strict';\nconsole.log('-- declaring a variable named alert 1 --');\n\n// this will not work!\n//  JS treats this like using a variable before it's declaration\nalert('huh?'); // ReferenceError - use before declare\n\nlet alert = 'hello';\n\nconsole.log(alert);\n```\n\n```js\n'use strict';\nconsole.log('-- declaring a variable named alert 2 --');\n\nlet alert = 'hello';\n\nconsole.log(alert);\n\nalert('will throw an error'); // TypeError - not a function\n```\n\n</details>\n\n---\n\n## References\n\n- [launchcode](https://education.launchcode.org/intro-to-professional-web-dev/chapters/data-and-variables/variables.html)\n- [javascript.info](https://javascript.info/variables)\n- [programiz](https://www.programiz.com/javascript/variables-constants)\n- [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let)\n- [HYF](https://hackyourfuture.github.io/study/#/javascript/variables)\n"
    }
  ]
}
